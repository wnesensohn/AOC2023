# AOC Day 1

```elixir
Mix.install([
  {:kino, "~> 0.11.0"}
])
```

## Part 1

```elixir
input = Kino.Input.textarea("Input")
```

```elixir
text = Kino.Input.read(input)

text
|> String.trim()
|> String.split()
|> Enum.map(fn ln ->
  digits =
    ln
    |> String.graphemes()
    |> Enum.flat_map(fn g ->
      case Integer.parse(g) do
        {int, _rest} -> [int]
        :error -> []
      end
    end)

  10 * Enum.at(digits, 0) + Enum.at(digits, -1)
end)
|> Enum.reduce(&(&1 + &2))
```

## Part 2

```elixir
text = Kino.Input.read(input)

digits = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]

text
|> String.trim()
|> String.split()
|> Enum.map(fn ln ->
  digits =
    0..String.length(ln)
    |> Enum.flat_map(fn idx ->
      v = String.slice(ln, idx, String.length(ln))

      {_, from_digit} =
        digits
        |> Enum.with_index()
        |> Enum.filter(fn {digit, _} -> String.starts_with?(v, digit) end)
        |> Enum.map_reduce(0, fn {_, index}, acc -> {index, 1 + index + acc} end)

      cond do
        from_digit > 0 ->
          [from_digit]

        true ->
          case Integer.parse(String.slice(ln, idx, 1)) do
            :error -> []
            {val, _} -> [val]
          end
      end
    end)

  10 * Enum.at(digits, 0) + Enum.at(digits, -1)
end)
|> Enum.reduce(&(&1 + &2))
```
