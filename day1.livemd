# AOC Day 1

```elixir
Mix.install([
  {:kino, "~> 0.11.0"}
])
```

## Part1

```elixir
input = Kino.Input.textarea("Input")
```

```elixir
text = Kino.Input.read(input)

text
|> String.trim()
|> String.split()
|> Enum.map(fn ln ->
  digits =
    ln
    |> String.graphemes()
    |> Enum.flat_map(fn g ->
      case Integer.parse(g) do
        {int, _rest} -> [int]
        :error -> []
      end
    end)

  10 * Enum.at(digits, 0) + Enum.at(digits, -1)
end)
|> Enum.reduce(&(&1 + &2))
```

## Part 2

```elixir
text = Kino.Input.read(input)

text
|> String.trim()
|> String.split()
|> Enum.map(fn ln ->
  digits =
    0..String.length(ln)
    |> Enum.flat_map(fn idx ->
      v = String.slice(ln, idx, String.length(ln))

      cond do
        String.starts_with?(v, "nine") ->
          [9]

        String.starts_with?(v, "eight") ->
          [8]

        String.starts_with?(v, "seven") ->
          [7]

        String.starts_with?(v, "six") ->
          [6]

        String.starts_with?(v, "five") ->
          [5]

        String.starts_with?(v, "four") ->
          [4]

        String.starts_with?(v, "three") ->
          [3]

        String.starts_with?(v, "two") ->
          [2]

        String.starts_with?(v, "one") ->
          [1]

        true ->
          case Integer.parse(String.slice(ln, idx, 1)) do
            :error -> []
            {val, _} -> [val]
          end
      end
    end)

  10 * Enum.at(digits, 0) + Enum.at(digits, -1)
end)
|> Enum.reduce(&(&1 + &2))
```
