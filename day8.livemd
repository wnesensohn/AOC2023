# AOC Day 8

```elixir
Mix.install([
  {:kino, "~> 0.11.0"},
  {:math, "~> 0.7.0"}
])
```

## Part 1

```elixir
input = Kino.Input.textarea("Input")
```

```elixir
text = Kino.Input.read(input) |> String.trim()

instructions =
  text
  |> String.split()
  |> Enum.at(0)
  |> String.split("", trim: true)
  |> Enum.map(fn direction ->
    case direction do
      "L" -> 0
      "R" -> 1
    end
  end)

field =
  text
  |> String.split("\n", trim: true)
  |> Enum.drop(1)
  |> Enum.map(fn x -> x |> String.split([" ", "=", ",", "(", ")"], trim: true) end)
  |> Map.new(fn [start, left, right] -> {start, [left, right]} end)

Stream.cycle(instructions)
|> Enum.reduce_while({0, "AAA"}, fn dir, {acc, cur} ->
  if cur != "ZZZ", do: {:cont, {acc + 1, field[cur] |> Enum.at(dir)}}, else: {:halt, {acc, cur}}
end)
```

## Part 2

```elixir
text = Kino.Input.read(input) |> String.trim()

instructions =
  text
  |> String.split()
  |> Enum.at(0)
  |> String.split("", trim: true)
  |> Enum.map(fn direction ->
    case direction do
      "L" -> 0
      "R" -> 1
    end
  end)

field =
  text
  |> String.split("\n", trim: true)
  |> Enum.drop(1)
  |> Enum.map(fn x -> x |> String.split([" ", "=", ",", "(", ")"], trim: true) end)
  |> Map.new(fn [start, left, right] -> {start, [left, right]} end)

starts = field |> Map.keys() |> Enum.filter(fn x -> String.ends_with?(x, "A") end)

starts =
  starts
  |> Enum.to_list()

instructions =
  instructions
  |> Enum.with_index()

starts
|> Enum.map(fn start ->
  Stream.cycle(instructions)
  |> Stream.with_index()
  |> Enum.reduce_while({Map.new(), start}, fn {{dir, idx}, globidx}, {acc, cur} ->
    is_final = String.ends_with?(cur, "Z")
    has_key = Map.has_key?(acc, {cur, idx})

    nextacc =
      case has_key do
        true -> acc
        false -> Map.put(acc, {cur, idx}, globidx)
      end

    if is_final and has_key,
      do: {:halt, Map.get(nextacc, {cur, idx})},
      else: {:cont, {nextacc, field[cur] |> Enum.at(dir)}}
  end)
end)
|> Enum.reduce(fn a, b -> Math.lcm(a, b) end)

# if Enum.any?(accx, fn x -> x == curx end),
# do: {:halt, {x, accx, curx}},
# else: {:cont, {next, cnt + 1, [next | accx]}}
```
